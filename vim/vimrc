"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Autocommands
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Reread configuration of Vim if .vimrc is saved.
augroup VimConfig
  au!
  autocmd BufWritePost ~/.vimrc       so ~/.vimrc
  autocmd BufWritePost _vimrc         so ~/_vimrc
  autocmd BufWritePost vimrc          so ~/.vimrc
augroup END

" Set colorcolumn to 80 chars, or (if not supported) highlight lines > 80 chars.
augroup ColorColumnConfig
   au!
   if exists('+colorcolumn')
      autocmd BufWinEnter * set colorcolumn=80
      autocmd BufWinEnter * hi ColorColumn ctermbg=lightgrey guibg=lightgrey
   else
      autocmd BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
   endif
augroup END

" Highlight over-length characters and trailing whitespace.
augroup ExtraCharacters
   au!
   autocmd ColorScheme * highlight ExtraWhitespace ctermbg=Red guibg=Red
   autocmd ColorScheme * highlight OverLength ctermbg=red ctermfg=white guibg=red guifg=white
   autocmd BufWinEnter * let w:whitespace_match_number =
   \ matchadd('ExtraWhitespace', '\s\+$')
   autocmd BufWinEnter * call matchadd('OverLength',
   \ '\(^\(\s\)\{-}\(*\|//\|/\*\)\{1}\(.\)*\(\%81v\)\)\@<=\(.\)\{1,}$')
   autocmd InsertEnter * call s:ToggleWhitespaceMatch('i')
   autocmd InsertLeave * call s:ToggleWhitespaceMatch('n')
augroup END

" Resize splits on window resize.
autocmd VimResized * exe "normal! \<c-w>="

" Restore the cursor when we can.
autocmd BufWinEnter * call RestoreCursor()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Pathogen - https://github.com/tpope/vim-pathogen

runtime bundle/vim-pathogen/autoload/pathogen.vim
call pathogen#infect()
call pathogen#helptags()


" Easymotion - https://github.com/Lokaltog/vim-easymotion

" This is so much more convenient.
let g:EasyMotion_leader_key=',m'


" Syntastic - https://github.com/scrooloose/syntastic
"  Commands:
"     :Errors              // pop up location list and display errors
"     :SyntasticToggleMode // toggles between active and passive mode
"     :SyntasticCheck      // forces a syntax check in passive mode

" check for syntax errors on file open.
let g:syntastic_check_on_open=1
" echo errors to the command window.
let g:syntastic_echo_current_error=1
" mark lines with errors and warnings.
let g:syntastic_enable_signs=1
" open error balloons when moused over erroneous lines.
let g:syntastic_enable_balloons=1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Strip trailing whitespace.
function! <SID>StripTrailingWhitespaces()
   let _s=@/
   let l = line(".")
   let c = col(".")
   %s/\s\+$//e
   let @/=_s
   call cursor(l, c)
endfunction

" Toggle match of trailing whitespace.
function! s:ToggleWhitespaceMatch(mode)
   let pattern = (a:mode == 'i') ? '\s\+\%#\@<!$' : '\s\+$'
   if exists('w:whitespace_match_number')
     call matchdelete(w:whitespace_match_number)
     call matchadd('ExtraWhitespace', pattern, 10, w:whitespace_match_number)
   else
     " Something went wrong, try to be graceful.
     let w:whitespace_match_number =  matchadd('ExtraWhitespace', pattern)
   endif
endfunction

" Restore the cursor when we can.
function! RestoreCursor()
    if line("'\"") <= line("$")
        normal! g`"
        normal! zz
    endif
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configuration customization
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

filetype on          " Recognize syntax by file extension.
filetype indent on   " Check for indent file.
filetype plugin on   " Allow plugins to be loaded by file type.

behave xterm   " Maintain keybindings across enviornments.

set autowrite                    " Write before executing the 'make' command.
set background=dark              " Usually prefer dark backgrounds.
set backspace=indent,eol,start   " Allow <BS> to go over indents, eol, and start of insert.
set cpoptions+=$                 " Show dollar sign at end of text to be changed.
set encoding=utf-8               " Set encoding to utf-8.
set expandtab                    " Expand tabs with spaces.
set fileencoding=utf-8           " Set fileencoding to utf-8.
set foldcolumn=1                 " Add <n> columns to show fold levels and boundaries.
set foldmethod=indent            " Set fold method (manual,indent,expr,syntax,diff,marker).
set hidden                       " Use hidden buffers so unsaved buffers can go to the background.
set history=500                  " Set number of lines for vim to remember.
set hlsearch                     " Highlight all search matches.
set ignorecase                   " Ignore case in regular expressions.
set incsearch                    " Immediately highlight search matches.
set laststatus=2                 " Show status line even where there is only one window.
set lazyredraw                   " Redraw faster.
set linespace=0                  " Adjust relative line height.
set modeline                     " Check for a modeline.
set nocompatible                 " No compatibility with vi.
set nofoldenable                 " Do not open file folded.
set noerrorbells                 " No beeps on errors.
set number                       " Display line numbers.
set path=~/Code/**               " Set default path
set scrolloff=5                  " Keep min of 'n' lines above/below cursor.
set shellslash                   " Use forward slashes regardless of OS.
set shiftwidth=3                 " >> and << shift 3 spaces.
set showcmd                      " Show partial commands in the status line.
set showmatch                    " Show matching () {} etc..
set showmode                     " Show current mode.
set sidescrolloff=10             " Keep min of 'n' columns right/left cursor.
set smartcase                    " Searches are case-sensitive if caps used.
set smarttab                     " Tabs and backspaces at the start of a line indent the line one level.
set smartindent                  " Maintains most indentation and adds extra level when nesting.
set softtabstop=3                " See spaces as tabs.
set splitright splitbelow        " Open splits below and to the right.
set synmaxcol=160                " Only matches syntax on first 'n' columns of each line (faster).
set tabstop=3                    " <Tab> move three characters.
set textwidth=80                 " Hard wrap at 'n' characters.
set viminfo='20,\"500,%          " Adjust viminfo contents.
set virtualedit=block            " Allow the cursor to go where it should not.
set wildmenu                     " Tab completion opens a Tab- and arrow-navigable menu.
set wildmode=longest,full        " Tab completion works like bash.
set wrap                         " Soft wrap lines.
set wrapscan                     " Searching wraps to start of file when end is reached.

" Text formatting settings.
" t: Auto-wrap text using textwidth. (default)
" c: Auto-wrap comments; insert comment leader. (default)
" q: Allow formatting of comments with "gq". (default)
" r: Insert comment leader after hitting <Enter>.
" o: Insert comment leader after hitting 'o' or 'O' in command mode.
" n: Auto-format lists, wrapping to text *after* the list bullet char.
" l: Don't auto-wrap if a line is already longer than textwidth.
set formatoptions+=tcronl

" Enable mouse scrolling in selected modes.
" a: All
" c: Command
" i: Insert
" n: Normal
" v: Visual
set mouse=

" Color theme.
syntax enable
set t_Co=16
colorscheme solarized

" Configuration variables.
let mapleader=","         " Use , instead of \ for the map leader.

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Command mode customization
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Make y behave like all other capitals.
map Y y$

" Make Q reformat text.
noremap Q gq

" Open the file under the cursor in a new tab.
noremap <Leader>ot <C-W>gf

" Toggle highlighting of the last search.
noremap <Leader>h :set hlsearch! hlsearch?<CR>

" Open a scratch buffer.
noremap <Leader>s :Scratch<CR>

" Improve movement on wrapped lines.
nnoremap j gj
nnoremap k gk

" Keep search pattern at the center of the screen.
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz
nnoremap <silent> g# g#zz

" Use C-hjkl in to change windows.
nnoremap <C-h> <C-w><Left>
nnoremap <C-j> <C-w><Down>
nnoremap <C-k> <C-w><Up>
nnoremap <C-l> <C-w><Right>

" Strip trailing whitespace.
nnoremap <silent> <leader>W :call <SID>StripTrailingWhitespaces()<CR>

" Allow easy toggling of spaces / tabs mode.
nnoremap <C-t><C-t> :set invexpandtab<CR>

" Create simple toggles for line numbers, paste mode, and word wrap.
nnoremap <C-N><C-N> :set invnumber<CR>
nnoremap <C-p><C-p> :set invpaste<CR>
nnoremap <C-w><C-w> :set invwrap<CR>

" Folding stuff.
nnoremap <C-o> zo
nnoremap <C-c> zc
nnoremap <C-O> zO
nnoremap <C-O><C-O> zR

" Open file for class name under cursor.
nnoremap <C-i> yiw:find <C-R>".php<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Insert mode customization
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Set up dictionary completion.
set dictionary+=~/.vim/dictionary/english-freq
set complete+=k

" Smash Esc.
inoremap jk <Esc>
inoremap kj <Esc>

" Use hjkl in insert mode.
imap <C-h> <Left>
imap <C-j> <Down>
imap <C-k> <Up>
imap <C-l> <Right>

" Make C-s write the buffer and return to insert mode when applicable.
inoremap <C-s> <C-O>:w<CR>
nnoremap <C-s> :w<CR>

" Auto-insert second braces and parenthesis.
inoremap {<CR> {<CR>}<Esc>O
inoremap ({<CR> ({<CR>});<Esc>O
inoremap <<<<CR> <<<EOT<CR>EOT;<Esc>O<C-TAB><C-TAB><C-TAB>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Visual mode customization
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Reselect visual block after indent/outdent.
xnoremap < <gv
xnoremap > >gvo

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
